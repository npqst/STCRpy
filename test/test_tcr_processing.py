import unittest
import glob

from Bio.PDB import MMCIFParser, PDBParser

import stcrpy
from stcrpy.tcr_processing import TCRParser, abTCR, TCR, MHCchain, MHC
from stcrpy.tcr_processing.annotate import annotate, AlignmentError


class TestTCRParser(unittest.TestCase):

    def test_imports(self):
        import stcrpy
        from stcrpy.tcr_processing import TCRParser, abTCR, TCR, MHCchain, MHC

    def test_get_tcr_structure_class_I(self):
        parser = TCRParser.TCRParser()

        pdb_file = "./test_files/5hyj.pdb"
        tcr = parser.get_tcr_structure("test", pdb_file)
        assert set(["".join(sorted(x.id)) for x in tcr.get_TCRs()]) == set(["DE", "IJ"])
        assert set(["".join(sorted(x.id)) for x in tcr.get_MHCs()]) == set(["FG", "AB"])
        assert set(["".join(sorted(x.id)) for x in tcr.get_antigens()]) == set(
            ["C", "H"]
        )

    def test_get_tcr_structure_class_II(self):
        parser = TCRParser.TCRParser()

        pdb_file = "./test_files/6r0e.cif"
        tcr = parser.get_tcr_structure("test", pdb_file)
        assert set(["".join(sorted(x.id)) for x in tcr.get_TCRs()]) == set(["DE"])
        assert set(["".join(sorted(x.id)) for x in tcr.get_MHCs()]) == set(["AB"])
        assert set(["".join(sorted(x.id)) for x in tcr.get_antigens()]) == set(["C"])

    def test_all_stcrdab(self):
        from tqdm import tqdm

        with open("./test_files/tcr_pdb_codes.txt") as f:
            pdb_codes = f.readlines()
        pdb_codes = [x.strip() for x in pdb_codes]
        badly_parsed_pdb = []
        errors = {}
        pdb_types = {}
        for pdb_code in tqdm(pdb_codes):
            # pdb_id = pdb_file.split("/")[-1].split(".")[0]
            try:
                tcr = stcrpy.fetch_TCRs(pdb_code)
            except Exception as e:
                errors[pdb_code] = e
        print(errors)
        assert len(badly_parsed_pdb) == 0

    def test_delta_beta_tcr_parsed_as_abTCR(self):
        parser = TCRParser.TCRParser()

        pdb_file = "./test_files/DB_test_T104_rank_0_model_0_refined.pdb"
        tcr = parser.get_tcr_structure("test", pdb_file)
        assert set(["".join(sorted(x.id)) for x in tcr.get_TCRs()]) == set(["AB"])
        assert all([isinstance(x, abTCR) for x in tcr.get_TCRs()])

    def test_save(self):
        parser = TCRParser.TCRParser()

        pdb_file = "./test_files/4nhu.pdb"
        tcr = parser.get_tcr_structure("test", pdb_file)

        from stcrpy.tcr_processing.TCRIO import TCRIO

        io = TCRIO()

        for x in tcr.get_TCRs():
            io.save(x, save_as=f"./test_files/test_{x.id}_TCR_only.pdb")

        for x in tcr.get_TCRs():
            io.save(x, tcr_only=True, save_as=f"./test_files/test_{x.id}.pdb")

        pdb_file = (
            "../stcrpy/tcr_geometry/reference_data/dock_reference_1_imgt_numbered.pdb"
        )
        tcr = parser.get_tcr_structure("test", pdb_file)
        for x in tcr.get_TCRs():
            io.save(x, save_as=f"./test_files/test_{x.id}.pdb")

    def test_error_prone_tcrs(self):
        parser = TCRParser.TCRParser()
        pdb_files = glob.glob("./test_files/TCRParser_test_files/*")
        for file in pdb_files:
            pdb_id = file.split("/")[-1].split(".")[0]
            print(pdb_id)
            tcr_structure = parser.get_tcr_structure(pdb_id, file)
            for tcr in tcr_structure.get_TCRs():
                assert isinstance(tcr, TCR)

    def test_MHC_single_chain_handling(self):
        with open("./test_files/tcr_pdb_codes.txt") as f:
            pdb_codes = f.readlines()
        pdb_codes = [x.strip() for x in pdb_codes]

        badly_parsed_pdb = []
        errors = {}
        single_chain_MHC = {}
        apo_TCRs = {}
        for pdb_file in pdb_codes:
            pdb_id = pdb_file.split("/")[-1].split(".")[0]
            try:
                tcr = stcrpy.fetch_TCRs(pdb_id)
                if len(list(tcr.get_TCRs())) == 0:
                    badly_parsed_pdb.append(pdb_id)
                else:
                    for t in tcr.get_TCRs():
                        if len(t.get_MHC()) == 0:
                            apo_TCRs[f"{pdb_id}_{t.id}"] = t
                            print(pdb_id, "No MHC found")
                            continue
                        mhc = t.get_MHC()
                        print(pdb_id, mhc)
                        if isinstance(mhc[0], MHCchain):
                            single_chain_MHC[pdb_id] = t
            except Exception as e:
                errors[pdb_id] = e
        print(badly_parsed_pdb)
        print(len(badly_parsed_pdb))
        print(single_chain_MHC)

    def test_MHC_association(self):
        with open("./test_files/tcr_pdb_codes.txt") as f:
            pdb_codes = f.readlines()
        pdb_codes = [x.strip() for x in pdb_codes]

        badly_parsed_pdb = []
        errors = {}
        apo_TCRs = {}
        true_apo = [
            "1hxm",
            "1kb5",
            "1kgc",
            "1nfd",
            "1tcr",
            "2bnu",
            "2cde",
            "2cdf",
            "2cdg",
            "2eyr",
            "2eys",
            "2eyt",
            "2ial",
        ]
        for pdb_file in pdb_codes:
            pdb_id = pdb_file.split("/")[-1].split(".")[0]
            try:
                tcr = stcrpy.fetch_TCRs(pdb_id)
                if len(list(tcr.get_TCRs())) == 0:
                    badly_parsed_pdb.append(pdb_id)
                else:
                    for t in tcr.get_TCRs():
                        if len(t.get_MHC()) == 0 and any(
                            [isinstance(x, MHC) for x in tcr.child_list]
                        ):
                            apo_TCRs[f"{pdb_id}_{t.id}"] = t
                            print(pdb_id, "No MHC found")
                            continue
            except Exception as e:
                errors[pdb_id] = e
        print(badly_parsed_pdb)
        print(len(badly_parsed_pdb))

    def test_MR1_parsing(self):
        import stcrpy

        tcr1, tcr2 = stcrpy.fetch_TCRs("5d7i")
        tcr1.get_MHC()[0]
        tcr2.get_MHC()[0]

        tcr1, tcr2 = stcrpy.fetch_TCRs("4pjf")
        tcr1.get_MHC()[0]
        tcr2.get_MHC()[0]

    def test_scMH2_parsing(self):
        import stcrpy

        with self.assertWarns(UserWarning):
            tcrs = stcrpy.fetch_TCRs("6u3n")
            # should raise warning saying that other MHC Class II chain is missing
        tcrs[0].get_MHC()[0].get_MHC_type()

        with self.assertWarns(UserWarning):
            tcrs = stcrpy.fetch_TCRs("6mkr")
            # should raise warning saying that other MHC Class II chain is missing
        tcrs[0].get_MHC()[0].get_MHC_type()


class TestAnnotate(unittest.TestCase):
    def setUp(self):
        self.mmcif_parser = MMCIFParser(QUIET=True)
        self.pdb_parser = PDBParser(QUIET=True)

        structure = self.mmcif_parser.get_structure('8gvb', './test_files/8gvb.cif')

        self.alpha_chain = structure[0]['A']
        self.beta_chain = structure[0]['B']
        self.mhc_i_chain = structure[0]['H']

    def test_alpha_chain(self):
        aligned_numbering, chain_type, germline_info, scTCR = annotate(self.alpha_chain)

        self.assertEqual(aligned_numbering, {
            (' ', 3, ' '): (2, ' '),
            (' ', 4, ' '): (3, ' '),
            (' ', 5, ' '): (4, ' '),
            (' ', 6, ' '): (5, ' '),
            (' ', 7, ' '): (6, ' '),
            (' ', 8, ' '): (7, ' '),
            (' ', 9, ' '): (8, ' '),
            (' ', 10, ' '): (9, ' '),
            (' ', 11, ' '): (10, ' '),
            (' ', 12, ' '): (11, ' '),
            (' ', 13, ' '): (12, ' '),
            (' ', 14, ' '): (13, ' '),
            (' ', 15, ' '): (14, ' '),
            (' ', 16, ' '): (15, ' '),
            (' ', 17, ' '): (16, ' '),
            (' ', 18, ' '): (17, ' '),
            (' ', 19, ' '): (18, ' '),
            (' ', 20, ' '): (19, ' '),
            (' ', 21, ' '): (20, ' '),
            (' ', 22, ' '): (21, ' '),
            (' ', 23, ' '): (22, ' '),
            (' ', 24, ' '): (23, ' '),
            (' ', 25, ' '): (24, ' '),
            (' ', 26, ' '): (25, ' '),
            (' ', 27, ' '): (26, ' '),
            (' ', 28, ' '): (27, ' '),
            (' ', 29, ' '): (28, ' '),
            (' ', 30, ' '): (29, ' '),
            (' ', 31, ' '): (36, ' '),
            (' ', 32, ' '): (37, ' '),
            (' ', 33, ' '): (38, ' '),
            (' ', 34, ' '): (39, ' '),
            (' ', 35, ' '): (40, ' '),
            (' ', 36, ' '): (41, ' '),
            (' ', 37, ' '): (42, ' '),
            (' ', 38, ' '): (43, ' '),
            (' ', 39, ' '): (44, ' '),
            (' ', 40, ' '): (45, ' '),
            (' ', 41, ' '): (46, ' '),
            (' ', 42, ' '): (47, ' '),
            (' ', 43, ' '): (48, ' '),
            (' ', 44, ' '): (49, ' '),
            (' ', 45, ' '): (50, ' '),
            (' ', 46, ' '): (51, ' '),
            (' ', 47, ' '): (52, ' '),
            (' ', 48, ' '): (53, ' '),
            (' ', 49, ' '): (54, ' '),
            (' ', 50, ' '): (55, ' '),
            (' ', 51, ' '): (56, ' '),
            (' ', 52, ' '): (57, ' '),
            (' ', 53, ' '): (58, ' '),
            (' ', 54, ' '): (59, ' '),
            (' ', 55, ' '): (62, ' '),
            (' ', 56, ' '): (63, ' '),
            (' ', 57, ' '): (64, ' '),
            (' ', 58, ' '): (65, ' '),
            (' ', 59, ' '): (66, ' '),
            (' ', 60, ' '): (67, ' '),
            (' ', 61, ' '): (68, ' '),
            (' ', 62, ' '): (74, ' '),
            (' ', 63, ' '): (75, ' '),
            (' ', 64, ' '): (76, ' '),
            (' ', 65, ' '): (77, ' '),
            (' ', 66, ' '): (78, ' '),
            (' ', 67, ' '): (79, ' '),
            (' ', 68, ' '): (80, ' '),
            (' ', 69, ' '): (81, ' '),
            (' ', 70, ' '): (82, ' '),
            (' ', 71, ' '): (83, ' '),
            (' ', 72, ' '): (84, ' '),
            (' ', 73, ' '): (85, ' '),
            (' ', 74, ' '): (86, ' '),
            (' ', 75, ' '): (87, ' '),
            (' ', 76, ' '): (88, ' '),
            (' ', 77, ' '): (89, ' '),
            (' ', 78, ' '): (90, ' '),
            (' ', 79, ' '): (91, ' '),
            (' ', 80, ' '): (92, ' '),
            (' ', 81, ' '): (93, ' '),
            (' ', 82, ' '): (94, ' '),
            (' ', 83, ' '): (95, ' '),
            (' ', 84, ' '): (96, ' '),
            (' ', 85, ' '): (97, ' '),
            (' ', 86, ' '): (98, ' '),
            (' ', 87, ' '): (99, ' '),
            (' ', 88, ' '): (100, ' '),
            (' ', 89, ' '): (101, ' '),
            (' ', 90, ' '): (102, ' '),
            (' ', 91, ' '): (103, ' '),
            (' ', 92, ' '): (104, ' '),
            (' ', 93, ' '): (105, ' '),
            (' ', 94, ' '): (106, ' '),
            (' ', 95, ' '): (107, ' '),
            (' ', 96, ' '): (108, ' '),
            (' ', 97, ' '): (109, ' '),
            (' ', 98, ' '): (110, ' '),
            (' ', 99, ' '): (112, ' '),
            (' ', 100, ' '): (113, ' '),
            (' ', 101, ' '): (114, ' '),
            (' ', 102, ' '): (115, ' '),
            (' ', 103, ' '): (116, ' '),
            (' ', 104, ' '): (117, ' '),
            (' ', 105, ' '): (118, ' '),
            (' ', 106, ' '): (119, ' '),
            (' ', 107, ' '): (120, ' '),
            (' ', 108, ' '): (121, ' '),
            (' ', 109, ' '): (122, ' '),
            (' ', 110, ' '): (123, ' '),
            (' ', 111, ' '): (124, ' '),
            (' ', 112, ' '): (125, ' '),
            (' ', 113, ' '): (126, ' '),
            (' ', 114, ' '): (127, ' '),
            (' ', 115, ' '): (128, ' '),
            (' ', 116, ' '): (129, ' '),
            (' ', 117, ' '): (130, ' '),
            (' ', 118, ' '): (131, ' '),
            (' ', 119, ' '): (132, ' '),
            (' ', 120, ' '): (133, ' '),
            (' ', 121, ' '): (134, ' '),
            (' ', 122, ' '): (135, ' '),
            (' ', 123, ' '): (136, ' '),
            (' ', 124, ' '): (137, ' '),
            (' ', 125, ' '): (138, ' '),
            (' ', 126, ' '): (139, ' '),
            (' ', 127, ' '): (140, ' '),
            (' ', 128, ' '): (141, ' '),
            (' ', 129, ' '): (142, ' '),
            (' ', 130, ' '): (143, ' '),
            (' ', 131, ' '): (144, ' '),
            (' ', 132, ' '): (145, ' '),
            (' ', 133, ' '): (146, ' '),
            (' ', 134, ' '): (147, ' '),
            (' ', 135, ' '): (148, ' '),
            (' ', 136, ' '): (149, ' '),
            (' ', 137, ' '): (150, ' '),
            (' ', 138, ' '): (151, ' '),
            (' ', 139, ' '): (152, ' '),
            (' ', 140, ' '): (153, ' '),
            (' ', 141, ' '): (154, ' '),
            (' ', 142, ' '): (155, ' '),
            (' ', 143, ' '): (156, ' '),
            (' ', 144, ' '): (157, ' '),
            (' ', 145, ' '): (158, ' '),
            (' ', 146, ' '): (159, ' '),
            (' ', 147, ' '): (160, ' '),
            (' ', 148, ' '): (161, ' '),
            (' ', 149, ' '): (162, ' '),
            (' ', 150, ' '): (163, ' '),
            (' ', 154, ' '): (164, ' '),
            (' ', 155, ' '): (165, ' '),
            (' ', 158, ' '): (166, ' '),
            (' ', 159, ' '): (167, ' '),
            (' ', 160, ' '): (168, ' '),
            (' ', 161, ' '): (169, ' '),
            (' ', 162, ' '): (170, ' '),
            (' ', 163, ' '): (171, ' '),
            (' ', 164, ' '): (172, ' '),
            (' ', 165, ' '): (173, ' '),
            (' ', 166, ' '): (174, ' '),
            (' ', 167, ' '): (175, ' '),
            (' ', 168, ' '): (176, ' '),
            (' ', 169, ' '): (177, ' '),
            (' ', 170, ' '): (178, ' '),
            (' ', 171, ' '): (179, ' '),
            (' ', 172, ' '): (180, ' '),
            (' ', 173, ' '): (181, ' '),
            (' ', 174, ' '): (182, ' '),
            (' ', 175, ' '): (183, ' '),
            (' ', 176, ' '): (184, ' '),
            (' ', 177, ' '): (185, ' '),
            (' ', 178, ' '): (186, ' '),
            (' ', 179, ' '): (187, ' '),
            (' ', 190, ' '): (188, ' '),
            (' ', 191, ' '): (189, ' '),
            (' ', 192, ' '): (190, ' '),
            (' ', 193, ' '): (191, ' '),
            (' ', 194, ' '): (192, ' '),
            (' ', 195, ' '): (193, ' '),
            (' ', 196, ' '): (194, ' '),
            (' ', 197, ' '): (195, ' '),
            (' ', 198, ' '): (196, ' '),
            (' ', 199, ' '): (197, ' '),
            (' ', 200, ' '): (198, ' '),
        })
        self.assertEqual(chain_type, 'A')
        self.assertEqual(germline_info, {
            'v_gene': [('human', 'TRAV8-3*01'), 0.9893617021276596], 'j_gene': [('human', 'TRAJ10*01'), 1.0]
        })
        self.assertFalse(scTCR)

    def test_alpha_chain_with_leader(self):
        alpha_chain_with_leader = self.mmcif_parser.get_structure(
            '', './test_files/alpha_chain_with_leader.cif'
        )[0]['D']

        aligned_numbering, chain_type, germline_info, scTCR = annotate(alpha_chain_with_leader)

        self.assertEqual(aligned_numbering, {
            (' ', 1, ' '): (1, 'A'),
            (' ', 2, ' '): (1, 'B'),
            (' ', 3, ' '): (1, 'C'),
            (' ', 4, ' '): (1, 'D'),
            (' ', 5, ' '): (1, 'E'),
            (' ', 6, ' '): (1, 'F'),
            (' ', 7, ' '): (1, 'G'),
            (' ', 8, ' '): (1, 'H'),
            (' ', 9, ' '): (1, 'I'),
            (' ', 10, ' '): (1, 'J'),
            (' ', 11, ' '): (1, 'K'),
            (' ', 12, ' '): (1, 'L'),
            (' ', 13, ' '): (1, 'M'),
            (' ', 14, ' '): (1, 'N'),
            (' ', 15, ' '): (1, 'O'),
            (' ', 16, ' '): (1, 'P'),
            (' ', 17, ' '): (1, 'Q'),
            (' ', 18, ' '): (1, 'R'),
            (' ', 19, ' '): (1, 'S'),
            (' ', 20, ' '): (1, ' '),
            (' ', 21, ' '): (2, ' '),
            (' ', 22, ' '): (3, ' '),
            (' ', 23, ' '): (4, ' '),
            (' ', 24, ' '): (5, ' '),
            (' ', 25, ' '): (6, ' '),
            (' ', 26, ' '): (7, ' '),
            (' ', 27, ' '): (8, ' '),
            (' ', 28, ' '): (9, ' '),
            (' ', 29, ' '): (10, ' '),
            (' ', 30, ' '): (11, ' '),
            (' ', 31, ' '): (12, ' '),
            (' ', 32, ' '): (13, ' '),
            (' ', 33, ' '): (14, ' '),
            (' ', 34, ' '): (15, ' '),
            (' ', 35, ' '): (16, ' '),
            (' ', 36, ' '): (17, ' '),
            (' ', 37, ' '): (18, ' '),
            (' ', 38, ' '): (19, ' '),
            (' ', 39, ' '): (20, ' '),
            (' ', 40, ' '): (21, ' '),
            (' ', 41, ' '): (22, ' '),
            (' ', 42, ' '): (23, ' '),
            (' ', 43, ' '): (24, ' '),
            (' ', 44, ' '): (25, ' '),
            (' ', 45, ' '): (26, ' '),
            (' ', 46, ' '): (27, ' '),
            (' ', 47, ' '): (28, ' '),
            (' ', 48, ' '): (29, ' '),
            (' ', 49, ' '): (36, ' '),
            (' ', 50, ' '): (37, ' '),
            (' ', 51, ' '): (38, ' '),
            (' ', 52, ' '): (39, ' '),
            (' ', 53, ' '): (40, ' '),
            (' ', 54, ' '): (41, ' '),
            (' ', 55, ' '): (42, ' '),
            (' ', 56, ' '): (43, ' '),
            (' ', 57, ' '): (44, ' '),
            (' ', 58, ' '): (45, ' '),
            (' ', 59, ' '): (46, ' '),
            (' ', 60, ' '): (47, ' '),
            (' ', 61, ' '): (48, ' '),
            (' ', 62, ' '): (49, ' '),
            (' ', 63, ' '): (50, ' '),
            (' ', 64, ' '): (51, ' '),
            (' ', 65, ' '): (52, ' '),
            (' ', 66, ' '): (53, ' '),
            (' ', 67, ' '): (54, ' '),
            (' ', 68, ' '): (55, ' '),
            (' ', 69, ' '): (56, ' '),
            (' ', 70, ' '): (57, ' '),
            (' ', 71, ' '): (58, ' '),
            (' ', 72, ' '): (59, ' '),
            (' ', 73, ' '): (63, ' '),
            (' ', 74, ' '): (64, ' '),
            (' ', 75, ' '): (65, ' '),
            (' ', 76, ' '): (66, ' '),
            (' ', 77, ' '): (67, ' '),
            (' ', 78, ' '): (68, ' '),
            (' ', 79, ' '): (74, ' '),
            (' ', 80, ' '): (75, ' '),
            (' ', 81, ' '): (76, ' '),
            (' ', 82, ' '): (77, ' '),
            (' ', 83, ' '): (78, ' '),
            (' ', 84, ' '): (79, ' '),
            (' ', 85, ' '): (80, ' '),
            (' ', 86, ' '): (81, ' '),
            (' ', 87, ' '): (82, ' '),
            (' ', 88, ' '): (83, ' '),
            (' ', 89, ' '): (84, ' '),
            (' ', 90, ' '): (85, ' '),
            (' ', 91, ' '): (86, ' '),
            (' ', 92, ' '): (87, ' '),
            (' ', 93, ' '): (88, ' '),
            (' ', 94, ' '): (89, ' '),
            (' ', 95, ' '): (90, ' '),
            (' ', 96, ' '): (91, ' '),
            (' ', 97, ' '): (92, ' '),
            (' ', 98, ' '): (93, ' '),
            (' ', 99, ' '): (94, ' '),
            (' ', 100, ' '): (95, ' '),
            (' ', 101, ' '): (96, ' '),
            (' ', 102, ' '): (97, ' '),
            (' ', 103, ' '): (98, ' '),
            (' ', 104, ' '): (99, ' '),
            (' ', 105, ' '): (100, ' '),
            (' ', 106, ' '): (101, ' '),
            (' ', 107, ' '): (102, ' '),
            (' ', 108, ' '): (103, ' '),
            (' ', 109, ' '): (104, ' '),
            (' ', 110, ' '): (105, ' '),
            (' ', 111, ' '): (106, ' '),
            (' ', 112, ' '): (107, ' '),
            (' ', 113, ' '): (108, ' '),
            (' ', 114, ' '): (109, ' '),
            (' ', 115, ' '): (110, ' '),
            (' ', 116, ' '): (112, ' '),
            (' ', 117, ' '): (113, ' '),
            (' ', 118, ' '): (114, ' '),
            (' ', 119, ' '): (115, ' '),
            (' ', 120, ' '): (116, ' '),
            (' ', 121, ' '): (117, ' '),
            (' ', 122, ' '): (118, ' '),
            (' ', 123, ' '): (119, ' '),
            (' ', 124, ' '): (120, ' '),
            (' ', 125, ' '): (121, ' '),
            (' ', 126, ' '): (122, ' '),
            (' ', 127, ' '): (123, ' '),
            (' ', 128, ' '): (124, ' '),
            (' ', 129, ' '): (125, ' '),
            (' ', 130, ' '): (126, ' '),
            (' ', 131, ' '): (127, ' '),
            (' ', 132, ' '): (128, ' '),
            (' ', 133, ' '): (129, ' '),
            (' ', 134, ' '): (130, ' '),
            (' ', 135, ' '): (131, ' '),
            (' ', 136, ' '): (132, ' '),
            (' ', 137, ' '): (133, ' '),
            (' ', 138, ' '): (134, ' '),
            (' ', 139, ' '): (135, ' '),
            (' ', 140, ' '): (136, ' '),
            (' ', 141, ' '): (137, ' '),
            (' ', 142, ' '): (138, ' '),
            (' ', 143, ' '): (139, ' '),
            (' ', 144, ' '): (140, ' '),
            (' ', 145, ' '): (141, ' '),
            (' ', 146, ' '): (142, ' '),
            (' ', 147, ' '): (143, ' '),
            (' ', 148, ' '): (144, ' '),
            (' ', 149, ' '): (145, ' '),
            (' ', 150, ' '): (146, ' '),
            (' ', 151, ' '): (147, ' '),
            (' ', 152, ' '): (148, ' '),
            (' ', 153, ' '): (149, ' '),
            (' ', 154, ' '): (150, ' '),
            (' ', 155, ' '): (151, ' '),
            (' ', 156, ' '): (152, ' '),
            (' ', 157, ' '): (153, ' '),
            (' ', 158, ' '): (154, ' '),
            (' ', 159, ' '): (155, ' '),
            (' ', 160, ' '): (156, ' '),
            (' ', 161, ' '): (157, ' '),
            (' ', 162, ' '): (158, ' '),
            (' ', 163, ' '): (159, ' '),
            (' ', 164, ' '): (160, ' '),
            (' ', 165, ' '): (161, ' '),
            (' ', 166, ' '): (162, ' '),
            (' ', 167, ' '): (163, ' '),
            (' ', 168, ' '): (164, ' '),
            (' ', 169, ' '): (165, ' '),
            (' ', 170, ' '): (166, ' '),
            (' ', 171, ' '): (167, ' '),
            (' ', 172, ' '): (168, ' '),
            (' ', 173, ' '): (169, ' '),
            (' ', 174, ' '): (170, ' '),
            (' ', 175, ' '): (171, ' '),
            (' ', 176, ' '): (172, ' '),
            (' ', 177, ' '): (173, ' '),
            (' ', 178, ' '): (174, ' '),
            (' ', 179, ' '): (175, ' '),
            (' ', 180, ' '): (176, ' '),
            (' ', 181, ' '): (177, ' '),
            (' ', 182, ' '): (178, ' '),
            (' ', 183, ' '): (179, ' '),
            (' ', 184, ' '): (180, ' '),
            (' ', 185, ' '): (181, ' '),
            (' ', 186, ' '): (182, ' '),
            (' ', 187, ' '): (183, ' '),
            (' ', 188, ' '): (184, ' '),
            (' ', 189, ' '): (185, ' '),
            (' ', 190, ' '): (186, ' '),
            (' ', 191, ' '): (187, ' '),
            (' ', 192, ' '): (188, ' '),
            (' ', 193, ' '): (189, ' '),
            (' ', 194, ' '): (190, ' '),
            (' ', 195, ' '): (191, ' '),
            (' ', 196, ' '): (192, ' '),
            (' ', 197, ' '): (193, ' '),
            (' ', 198, ' '): (194, ' '),
            (' ', 199, ' '): (195, ' '),
            (' ', 200, ' '): (196, ' '),
            (' ', 201, ' '): (197, ' '),
            (' ', 202, ' '): (198, ' '),
            (' ', 203, ' '): (199, ' '),
            (' ', 204, ' '): (200, ' '),
            (' ', 205, ' '): (201, ' '),
            (' ', 206, ' '): (202, ' '),
            (' ', 207, ' '): (203, ' '),
            (' ', 208, ' '): (204, ' '),
            (' ', 209, ' '): (205, ' '),
            (' ', 210, ' '): (206, ' '),
            (' ', 211, ' '): (207, ' '),
            (' ', 212, ' '): (208, ' '),
            (' ', 213, ' '): (209, ' '),
            (' ', 214, ' '): (210, ' '),
            (' ', 215, ' '): (211, ' '),
            (' ', 216, ' '): (212, ' '),
            (' ', 217, ' '): (213, ' '),
            (' ', 218, ' '): (214, ' '),
            (' ', 219, ' '): (215, ' '),
            (' ', 220, ' '): (216, ' '),
            (' ', 221, ' '): (217, ' '),
            (' ', 222, ' '): (218, ' '),
            (' ', 223, ' '): (219, ' '),
            (' ', 224, ' '): (220, ' '),
            (' ', 225, ' '): (221, ' '),
            (' ', 226, ' '): (222, ' '),
            (' ', 227, ' '): (223, ' '),
            (' ', 228, ' '): (224, ' '),
            (' ', 229, ' '): (225, ' '),
            (' ', 230, ' '): (226, ' '),
            (' ', 231, ' '): (227, ' '),
            (' ', 232, ' '): (228, ' '),
            (' ', 233, ' '): (229, ' '),
            (' ', 234, ' '): (230, ' '),
            (' ', 235, ' '): (231, ' '),
            (' ', 236, ' '): (232, ' '),
            (' ', 237, ' '): (233, ' '),
            (' ', 238, ' '): (234, ' '),
            (' ', 239, ' '): (235, ' '),
            (' ', 240, ' '): (236, ' '),
            (' ', 241, ' '): (237, ' '),
            (' ', 242, ' '): (238, ' '),
            (' ', 243, ' '): (239, ' '),
            (' ', 244, ' '): (240, ' '),
            (' ', 245, ' '): (241, ' '),
            (' ', 246, ' '): (242, ' '),
            (' ', 247, ' '): (243, ' '),
            (' ', 248, ' '): (244, ' '),
            (' ', 249, ' '): (245, ' '),
            (' ', 250, ' '): (246, ' '),
            (' ', 251, ' '): (247, ' '),
            (' ', 252, ' '): (248, ' '),
            (' ', 253, ' '): (249, ' '),
            (' ', 254, ' '): (250, ' '),
            (' ', 255, ' '): (251, ' '),
            (' ', 256, ' '): (252, ' '),
            (' ', 257, ' '): (253, ' '),
            (' ', 258, ' '): (254, ' '),
            (' ', 259, ' '): (255, ' '),
            (' ', 260, ' '): (256, ' '),
            (' ', 261, ' '): (257, ' '),
            (' ', 262, ' '): (258, ' '),
            (' ', 263, ' '): (259, ' '),
            (' ', 264, ' '): (260, ' '),
            (' ', 265, ' '): (261, ' '),
            (' ', 266, ' '): (262, ' '),
            (' ', 267, ' '): (263, ' '),
            (' ', 268, ' '): (264, ' '),
            (' ', 269, ' '): (265, ' '),
        })
        self.assertEqual(chain_type, 'A')
        self.assertEqual(germline_info, {
            'v_gene': [('mouse', 'TRAV6D-5*01'), 1.0], 'j_gene': [('mouse', 'TRAJ6*01'), 1.0]
        })
        self.assertFalse(scTCR)

    def test_alignment_error(self):
        structure = self.mmcif_parser.get_structure('', './test_files/test_annotation_error.cif')

        with self.assertRaises(AlignmentError):
            annotate(structure[0]['E'])

    def test_sc_tcr(self):
        structure = self.pdb_parser.get_structure('', './test_files/1bwm_scTCR.pdb')
        (domain1, domain2), chain_type, germline_info, scTCR = annotate(structure[0]['A'])

        self.assertEqual(domain1, {
            (' ', 3, ' '): (3, ' '),
            (' ', 4, ' '): (4, ' '),
            (' ', 5, ' '): (5, ' '),
            (' ', 6, ' '): (6, ' '),
            (' ', 7, ' '): (7, ' '),
            (' ', 8, ' '): (8, ' '),
            (' ', 9, ' '): (9, ' '),
            (' ', 10, ' '): (10, ' '),
            (' ', 11, ' '): (11, ' '),
            (' ', 12, ' '): (12, ' '),
            (' ', 13, ' '): (13, ' '),
            (' ', 14, ' '): (14, ' '),
            (' ', 15, ' '): (15, ' '),
            (' ', 16, ' '): (16, ' '),
            (' ', 17, ' '): (17, ' '),
            (' ', 18, ' '): (18, ' '),
            (' ', 19, ' '): (19, ' '),
            (' ', 20, ' '): (20, ' '),
            (' ', 21, ' '): (21, ' '),
            (' ', 22, ' '): (22, ' '),
            (' ', 23, ' '): (23, ' '),
            (' ', 24, ' '): (24, ' '),
            (' ', 25, ' '): (25, ' '),
            (' ', 26, ' '): (26, ' '),
            (' ', 27, ' '): (27, ' '),
            (' ', 28, ' '): (28, ' '),
            (' ', 29, ' '): (29, ' '),
            (' ', 30, ' '): (37, ' '),
            (' ', 31, ' '): (38, ' '),
            (' ', 32, ' '): (39, ' '),
            (' ', 33, ' '): (40, ' '),
            (' ', 34, ' '): (41, ' '),
            (' ', 35, ' '): (42, ' '),
            (' ', 36, ' '): (43, ' '),
            (' ', 37, ' '): (44, ' '),
            (' ', 38, ' '): (45, ' '),
            (' ', 39, ' '): (46, ' '),
            (' ', 40, ' '): (47, ' '),
            (' ', 41, ' '): (48, ' '),
            (' ', 42, ' '): (49, ' '),
            (' ', 43, ' '): (50, ' '),
            (' ', 44, ' '): (51, ' '),
            (' ', 45, ' '): (52, ' '),
            (' ', 46, ' '): (53, ' '),
            (' ', 47, ' '): (54, ' '),
            (' ', 48, ' '): (55, ' '),
            (' ', 49, ' '): (56, ' '),
            (' ', 50, ' '): (57, ' '),
            (' ', 51, ' '): (58, ' '),
            (' ', 52, ' '): (63, ' '),
            (' ', 53, ' '): (64, ' '),
            (' ', 54, ' '): (65, ' '),
            (' ', 55, ' '): (66, ' '),
            (' ', 56, ' '): (67, ' '),
            (' ', 57, ' '): (68, ' '),
            (' ', 58, ' '): (69, ' '),
            (' ', 59, ' '): (70, ' '),
            (' ', 60, ' '): (71, ' '),
            (' ', 61, ' '): (72, ' '),
            (' ', 62, ' '): (74, ' '),
            (' ', 63, ' '): (75, ' '),
            (' ', 65, ' '): (76, ' '),
            (' ', 66, ' '): (77, ' '),
            (' ', 67, ' '): (78, ' '),
            (' ', 68, ' '): (79, ' '),
            (' ', 69, ' '): (80, ' '),
            (' ', 70, ' '): (81, ' '),
            (' ', 71, ' '): (83, ' '),
            (' ', 72, ' '): (84, ' '),
            (' ', 73, ' '): (85, ' '),
            (' ', 74, ' '): (86, ' '),
            (' ', 75, ' '): (87, ' '),
            (' ', 76, ' '): (88, ' '),
            (' ', 77, ' '): (89, ' '),
            (' ', 78, ' '): (90, ' '),
            (' ', 79, ' '): (91, ' '),
            (' ', 80, ' '): (92, ' '),
            (' ', 81, ' '): (93, ' '),
            (' ', 82, ' '): (94, ' '),
            (' ', 83, ' '): (95, ' '),
            (' ', 84, ' '): (96, ' '),
            (' ', 85, ' '): (97, ' '),
            (' ', 86, ' '): (98, ' '),
            (' ', 87, ' '): (99, ' '),
            (' ', 88, ' '): (100, ' '),
            (' ', 89, ' '): (101, ' '),
            (' ', 90, ' '): (102, ' '),
            (' ', 91, ' '): (103, ' '),
            (' ', 92, ' '): (104, ' '),
            (' ', 93, ' '): (105, ' '),
            (' ', 94, ' '): (106, ' '),
            (' ', 95, ' '): (107, ' '),
            (' ', 96, ' '): (108, ' '),
            (' ', 97, ' '): (109, ' '),
            (' ', 98, ' '): (110, ' '),
            (' ', 99, ' '): (113, ' '),
            (' ', 104, ' '): (114, ' '),
            (' ', 105, ' '): (115, ' '),
            (' ', 106, ' '): (116, ' '),
            (' ', 107, ' '): (117, ' '),
            (' ', 108, ' '): (118, ' '),
            (' ', 109, ' '): (119, ' '),
            (' ', 110, ' '): (120, ' '),
            (' ', 111, ' '): (121, ' '),
            (' ', 112, ' '): (122, ' '),
            (' ', 113, ' '): (123, ' '),
            (' ', 114, ' '): (124, ' '),
            (' ', 115, ' '): (125, ' '),
            (' ', 116, ' '): (126, ' '),
            (' ', 116, 'A'): (127, ' '),
            (' ', 201, ' '): (128, ' '),
            (' ', 202, ' '): (129, ' '),
            (' ', 203, ' '): (130, ' '),
            (' ', 204, ' '): (131, ' '),
            (' ', 205, ' '): (132, ' '),
            (' ', 206, ' '): (133, ' '),
            (' ', 207, ' '): (134, ' '),
            (' ', 208, ' '): (135, ' '),
            (' ', 209, ' '): (136, ' '),
            (' ', 210, ' '): (137, ' '),
            (' ', 211, ' '): (138, ' '),
            (' ', 212, ' '): (139, ' '),
            (' ', 213, ' '): (140, ' '),
            (' ', 214, ' '): (141, ' '),
            (' ', 215, ' '): (142, ' '),
            (' ', 216, ' '): (143, ' '),
            (' ', 217, ' '): (144, ' '),
            (' ', 218, ' '): (145, ' '),
            (' ', 219, ' '): (146, ' '),
            (' ', 220, ' '): (147, ' '),
            (' ', 221, ' '): (148, ' '),
            (' ', 222, ' '): (149, ' '),
            (' ', 223, ' '): (150, ' '),
            (' ', 224, ' '): (151, ' '),
            (' ', 225, ' '): (152, ' '),
            (' ', 226, ' '): (153, ' '),
            (' ', 227, ' '): (154, ' '),
        })
        self.assertEqual(domain2, {
            (' ', 301, ' '): (1, ' '),
            (' ', 301, 'A'): (2, ' '),
            (' ', 302, ' '): (3, ' '),
            (' ', 303, ' '): (4, ' '),
            (' ', 304, ' '): (5, ' '),
            (' ', 305, ' '): (6, ' '),
            (' ', 306, ' '): (7, ' '),
            (' ', 307, ' '): (8, ' '),
            (' ', 308, ' '): (9, ' '),
            (' ', 309, ' '): (10, ' '),
            (' ', 310, ' '): (11, ' '),
            (' ', 311, ' '): (12, ' '),
            (' ', 312, ' '): (13, ' '),
            (' ', 313, ' '): (14, ' '),
            (' ', 314, ' '): (15, ' '),
            (' ', 315, ' '): (16, ' '),
            (' ', 316, ' '): (17, ' '),
            (' ', 317, ' '): (18, ' '),
            (' ', 318, ' '): (19, ' '),
            (' ', 319, ' '): (20, ' '),
            (' ', 320, ' '): (21, ' '),
            (' ', 321, ' '): (22, ' '),
            (' ', 322, ' '): (23, ' '),
            (' ', 323, ' '): (24, ' '),
            (' ', 324, ' '): (25, ' '),
            (' ', 325, ' '): (26, ' '),
            (' ', 326, ' '): (27, ' '),
            (' ', 327, ' '): (28, ' '),
            (' ', 328, ' '): (29, ' '),
            (' ', 329, ' '): (36, ' '),
            (' ', 330, ' '): (37, ' '),
            (' ', 331, ' '): (38, ' '),
            (' ', 332, ' '): (39, ' '),
            (' ', 333, ' '): (40, ' '),
            (' ', 334, ' '): (41, ' '),
            (' ', 335, ' '): (42, ' '),
            (' ', 336, ' '): (43, ' '),
            (' ', 337, ' '): (44, ' '),
            (' ', 338, ' '): (45, ' '),
            (' ', 339, ' '): (46, ' '),
            (' ', 340, ' '): (47, ' '),
            (' ', 341, ' '): (48, ' '),
            (' ', 342, ' '): (49, ' '),
            (' ', 343, ' '): (50, ' '),
            (' ', 344, ' '): (51, ' '),
            (' ', 345, ' '): (52, ' '),
            (' ', 346, ' '): (53, ' '),
            (' ', 347, ' '): (54, ' '),
            (' ', 348, ' '): (55, ' '),
            (' ', 349, ' '): (56, ' '),
            (' ', 350, ' '): (57, ' '),
            (' ', 351, ' '): (58, ' '),
            (' ', 352, ' '): (59, ' '),
            (' ', 353, ' '): (63, ' '),
            (' ', 354, ' '): (64, ' '),
            (' ', 355, ' '): (65, ' '),
            (' ', 356, ' '): (66, ' '),
            (' ', 357, ' '): (67, ' '),
            (' ', 358, ' '): (68, ' '),
            (' ', 359, ' '): (74, ' '),
            (' ', 361, ' '): (75, ' '),
            (' ', 362, ' '): (76, ' '),
            (' ', 363, ' '): (77, ' '),
            (' ', 364, ' '): (78, ' '),
            (' ', 365, ' '): (79, ' '),
            (' ', 366, ' '): (80, ' '),
            (' ', 367, ' '): (81, ' '),
            (' ', 368, ' '): (82, ' '),
            (' ', 369, ' '): (83, ' '),
            (' ', 370, ' '): (84, ' '),
            (' ', 371, ' '): (85, ' '),
            (' ', 372, ' '): (86, ' '),
            (' ', 373, ' '): (87, ' '),
            (' ', 374, ' '): (88, ' '),
            (' ', 375, ' '): (89, ' '),
            (' ', 376, ' '): (90, ' '),
            (' ', 377, ' '): (91, ' '),
            (' ', 378, ' '): (92, ' '),
            (' ', 379, ' '): (93, ' '),
            (' ', 380, ' '): (94, ' '),
            (' ', 381, ' '): (95, ' '),
            (' ', 382, ' '): (96, ' '),
            (' ', 383, ' '): (97, ' '),
            (' ', 384, ' '): (98, ' '),
            (' ', 385, ' '): (99, ' '),
            (' ', 386, ' '): (100, ' '),
            (' ', 387, ' '): (101, ' '),
            (' ', 388, ' '): (102, ' '),
            (' ', 389, ' '): (103, ' '),
            (' ', 390, ' '): (104, ' '),
            (' ', 391, ' '): (105, ' '),
            (' ', 392, ' '): (106, ' '),
            (' ', 393, ' '): (107, ' '),
            (' ', 399, ' '): (108, ' '),
            (' ', 400, ' '): (109, ' '),
            (' ', 401, ' '): (113, ' '),
            (' ', 402, ' '): (114, ' '),
            (' ', 403, ' '): (115, ' '),
            (' ', 404, ' '): (116, ' '),
            (' ', 405, ' '): (117, ' '),
            (' ', 406, ' '): (118, ' '),
            (' ', 407, ' '): (119, ' '),
            (' ', 408, ' '): (120, ' '),
            (' ', 409, ' '): (121, ' '),
            (' ', 410, ' '): (122, ' '),
            (' ', 411, ' '): (123, ' '),
            (' ', 412, ' '): (124, ' '),
            (' ', 413, ' '): (125, ' '),
            (' ', 414, ' '): (126, ' '),
            (' ', 415, ' '): (127, ' '),
            (' ', 416, ' '): (128, ' '),
            (' ', 417, ' '): (129, ' '),
        })
        self.assertEqual(chain_type, 'BA')
        self.assertEqual(germline_info, {
            'j_gene': [('mouse', 'TRAJ4*02'), 0.9285714285714286],
            'v_gene': [('mouse', 'TRAV14D-2*01'), 0.989247311827957],
        })
        self.assertTrue(scTCR)
    
    

    def test_mhc_i_chain(self):
        aligned_numbering, chain_type, germline_info, scTCR = annotate(self.mhc_i_chain)

        self.assertEqual(aligned_numbering, {
            (' ', 2, ' '): (2, ' '),
            (' ', 3, ' '): (3, ' '),
            (' ', 4, ' '): (4, ' '),
            (' ', 5, ' '): (5, ' '),
            (' ', 6, ' '): (6, ' '),
            (' ', 7, ' '): (7, ' '),
            (' ', 8, ' '): (8, ' '),
            (' ', 9, ' '): (9, ' '),
            (' ', 10, ' '): (10, ' '),
            (' ', 11, ' '): (11, ' '),
            (' ', 12, ' '): (12, ' '),
            (' ', 13, ' '): (13, ' '),
            (' ', 14, ' '): (14, ' '),
            (' ', 15, ' '): (15, ' '),
            (' ', 16, ' '): (16, ' '),
            (' ', 17, ' '): (17, ' '),
            (' ', 18, ' '): (18, ' '),
            (' ', 19, ' '): (19, ' '),
            (' ', 20, ' '): (20, ' '),
            (' ', 21, ' '): (21, ' '),
            (' ', 22, ' '): (22, ' '),
            (' ', 23, ' '): (23, ' '),
            (' ', 24, ' '): (24, ' '),
            (' ', 25, ' '): (25, ' '),
            (' ', 26, ' '): (26, ' '),
            (' ', 27, ' '): (27, ' '),
            (' ', 28, ' '): (28, ' '),
            (' ', 29, ' '): (29, ' '),
            (' ', 30, ' '): (30, ' '),
            (' ', 31, ' '): (31, ' '),
            (' ', 32, ' '): (32, ' '),
            (' ', 33, ' '): (33, ' '),
            (' ', 34, ' '): (34, ' '),
            (' ', 35, ' '): (35, ' '),
            (' ', 36, ' '): (36, ' '),
            (' ', 37, ' '): (37, ' '),
            (' ', 38, ' '): (38, ' '),
            (' ', 39, ' '): (39, ' '),
            (' ', 40, ' '): (40, ' '),
            (' ', 41, ' '): (41, ' '),
            (' ', 42, ' '): (42, ' '),
            (' ', 43, ' '): (43, ' '),
            (' ', 44, ' '): (44, ' '),
            (' ', 45, ' '): (45, ' '),
            (' ', 46, ' '): (46, ' '),
            (' ', 47, ' '): (47, ' '),
            (' ', 48, ' '): (48, ' '),
            (' ', 49, ' '): (49, ' '),
            (' ', 50, ' '): (50, ' '),
            (' ', 51, ' '): (51, ' '),
            (' ', 52, ' '): (52, ' '),
            (' ', 53, ' '): (53, ' '),
            (' ', 54, ' '): (54, ' '),
            (' ', 55, ' '): (55, ' '),
            (' ', 56, ' '): (56, ' '),
            (' ', 57, ' '): (57, ' '),
            (' ', 58, ' '): (58, ' '),
            (' ', 59, ' '): (59, ' '),
            (' ', 60, ' '): (60, ' '),
            (' ', 61, ' '): (61, ' '),
            (' ', 62, ' '): (62, ' '),
            (' ', 63, ' '): (63, ' '),
            (' ', 64, ' '): (64, ' '),
            (' ', 65, ' '): (65, ' '),
            (' ', 66, ' '): (66, ' '),
            (' ', 67, ' '): (67, ' '),
            (' ', 68, ' '): (68, ' '),
            (' ', 69, ' '): (69, ' '),
            (' ', 70, ' '): (70, ' '),
            (' ', 71, ' '): (71, ' '),
            (' ', 72, ' '): (72, ' '),
            (' ', 73, ' '): (73, ' '),
            (' ', 74, ' '): (74, ' '),
            (' ', 75, ' '): (75, ' '),
            (' ', 76, ' '): (76, ' '),
            (' ', 77, ' '): (77, ' '),
            (' ', 78, ' '): (78, ' '),
            (' ', 79, ' '): (79, ' '),
            (' ', 80, ' '): (80, ' '),
            (' ', 81, ' '): (81, ' '),
            (' ', 82, ' '): (82, ' '),
            (' ', 83, ' '): (83, ' '),
            (' ', 84, ' '): (84, ' '),
            (' ', 85, ' '): (85, ' '),
            (' ', 86, ' '): (86, ' '),
            (' ', 87, ' '): (87, ' '),
            (' ', 88, ' '): (88, ' '),
            (' ', 89, ' '): (89, ' '),
            (' ', 90, ' '): (90, ' '),
            (' ', 91, ' '): (1001, ' '),
            (' ', 92, ' '): (1002, ' '),
            (' ', 93, ' '): (1003, ' '),
            (' ', 94, ' '): (1004, ' '),
            (' ', 95, ' '): (1005, ' '),
            (' ', 96, ' '): (1006, ' '),
            (' ', 97, ' '): (1007, ' '),
            (' ', 98, ' '): (1008, ' '),
            (' ', 99, ' '): (1009, ' '),
            (' ', 100, ' '): (1010, ' '),
            (' ', 101, ' '): (1011, ' '),
            (' ', 102, ' '): (1012, ' '),
            (' ', 103, ' '): (1013, ' '),
            (' ', 104, ' '): (1014, ' '),
            (' ', 105, ' '): (1015, ' '),
            (' ', 106, ' '): (1016, ' '),
            (' ', 107, ' '): (1017, ' '),
            (' ', 108, ' '): (1018, ' '),
            (' ', 109, ' '): (1019, ' '),
            (' ', 110, ' '): (1020, ' '),
            (' ', 111, ' '): (1021, ' '),
            (' ', 112, ' '): (1022, ' '),
            (' ', 113, ' '): (1023, ' '),
            (' ', 114, ' '): (1024, ' '),
            (' ', 115, ' '): (1025, ' '),
            (' ', 116, ' '): (1026, ' '),
            (' ', 117, ' '): (1027, ' '),
            (' ', 118, ' '): (1028, ' '),
            (' ', 119, ' '): (1029, ' '),
            (' ', 120, ' '): (1030, ' '),
            (' ', 121, ' '): (1031, ' '),
            (' ', 122, ' '): (1032, ' '),
            (' ', 123, ' '): (1033, ' '),
            (' ', 124, ' '): (1034, ' '),
            (' ', 125, ' '): (1035, ' '),
            (' ', 126, ' '): (1036, ' '),
            (' ', 127, ' '): (1037, ' '),
            (' ', 128, ' '): (1038, ' '),
            (' ', 129, ' '): (1039, ' '),
            (' ', 130, ' '): (1042, ' '),
            (' ', 131, ' '): (1043, ' '),
            (' ', 132, ' '): (1044, ' '),
            (' ', 133, ' '): (1045, ' '),
            (' ', 134, ' '): (1046, ' '),
            (' ', 135, ' '): (1047, ' '),
            (' ', 136, ' '): (1048, ' '),
            (' ', 137, ' '): (1049, ' '),
            (' ', 138, ' '): (1050, ' '),
            (' ', 139, ' '): (1051, ' '),
            (' ', 140, ' '): (1052, ' '),
            (' ', 141, ' '): (1053, ' '),
            (' ', 142, ' '): (1054, ' '),
            (' ', 143, ' '): (1055, ' '),
            (' ', 144, ' '): (1056, ' '),
            (' ', 145, ' '): (1057, ' '),
            (' ', 146, ' '): (1058, ' '),
            (' ', 147, ' '): (1059, ' '),
            (' ', 148, ' '): (1060, ' '),
            (' ', 149, ' '): (1061, ' '),
            (' ', 150, ' '): (1061, 'A'),
            (' ', 151, ' '): (1062, ' '),
            (' ', 152, ' '): (1063, ' '),
            (' ', 153, ' '): (1064, ' '),
            (' ', 154, ' '): (1065, ' '),
            (' ', 155, ' '): (1066, ' '),
            (' ', 156, ' '): (1067, ' '),
            (' ', 157, ' '): (1068, ' '),
            (' ', 158, ' '): (1069, ' '),
            (' ', 159, ' '): (1070, ' '),
            (' ', 160, ' '): (1071, ' '),
            (' ', 161, ' '): (1072, ' '),
            (' ', 162, ' '): (1072, 'A'),
            (' ', 163, ' '): (1073, ' '),
            (' ', 164, ' '): (1074, ' '),
            (' ', 165, ' '): (1075, ' '),
            (' ', 166, ' '): (1076, ' '),
            (' ', 167, ' '): (1077, ' '),
            (' ', 168, ' '): (1078, ' '),
            (' ', 169, ' '): (1079, ' '),
            (' ', 170, ' '): (1080, ' '),
            (' ', 171, ' '): (1081, ' '),
            (' ', 172, ' '): (1082, ' '),
            (' ', 173, ' '): (1083, ' '),
            (' ', 174, ' '): (1084, ' '),
            (' ', 175, ' '): (1085, ' '),
            (' ', 176, ' '): (1086, ' '),
            (' ', 177, ' '): (1087, ' '),
            (' ', 178, ' '): (1088, ' '),
            (' ', 179, ' '): (1089, ' '),
            (' ', 180, ' '): (1090, ' '),
            (' ', 181, ' '): (1091, ' '),
            (' ', 182, ' '): (1092, ' '),
            (' ', 183, ' '): (1093, ' '),
            (' ', 184, ' '): (1094, ' '),
            (' ', 185, ' '): (1095, ' '),
            (' ', 186, ' '): (1096, ' '),
            (' ', 187, ' '): (1097, ' '),
            (' ', 188, ' '): (1098, ' '),
            (' ', 189, ' '): (1099, ' '),
            (' ', 190, ' '): (1100, ' '),
            (' ', 191, ' '): (1101, ' '),
            (' ', 192, ' '): (1102, ' '),
            (' ', 193, ' '): (1103, ' '),
            (' ', 194, ' '): (1104, ' '),
            (' ', 195, ' '): (1105, ' '),
            (' ', 196, ' '): (1106, ' '),
            (' ', 197, ' '): (1107, ' '),
            (' ', 198, ' '): (1108, ' '),
            (' ', 199, ' '): (1109, ' '),
            (' ', 200, ' '): (1110, ' '),
            (' ', 201, ' '): (1111, ' '),
            (' ', 202, ' '): (1112, ' '),
            (' ', 203, ' '): (1113, ' '),
            (' ', 204, ' '): (1114, ' '),
            (' ', 205, ' '): (1115, ' '),
            (' ', 206, ' '): (1116, ' '),
            (' ', 207, ' '): (1117, ' '),
            (' ', 208, ' '): (1118, ' '),
            (' ', 209, ' '): (1119, ' '),
            (' ', 210, ' '): (1120, ' '),
            (' ', 211, ' '): (1121, ' '),
            (' ', 212, ' '): (1122, ' '),
            (' ', 213, ' '): (1123, ' '),
            (' ', 214, ' '): (1124, ' '),
            (' ', 215, ' '): (1125, ' '),
            (' ', 216, ' '): (1126, ' '),
            (' ', 217, ' '): (1127, ' '),
            (' ', 218, ' '): (1128, ' '),
            (' ', 219, ' '): (1129, ' '),
            (' ', 220, ' '): (1130, ' '),
            (' ', 221, ' '): (1131, ' '),
            (' ', 222, ' '): (1132, ' '),
            (' ', 223, ' '): (1133, ' '),
            (' ', 224, ' '): (1134, ' '),
            (' ', 225, ' '): (1135, ' '),
            (' ', 226, ' '): (1136, ' '),
            (' ', 227, ' '): (1137, ' '),
            (' ', 228, ' '): (1138, ' '),
            (' ', 229, ' '): (1139, ' '),
            (' ', 230, ' '): (1140, ' '),
            (' ', 231, ' '): (1141, ' '),
            (' ', 232, ' '): (1142, ' '),
            (' ', 233, ' '): (1143, ' '),
            (' ', 234, ' '): (1144, ' '),
            (' ', 235, ' '): (1145, ' '),
            (' ', 236, ' '): (1146, ' '),
            (' ', 237, ' '): (1147, ' '),
            (' ', 238, ' '): (1148, ' '),
            (' ', 239, ' '): (1149, ' '),
            (' ', 240, ' '): (1150, ' '),
            (' ', 241, ' '): (1151, ' '),
            (' ', 242, ' '): (1152, ' '),
            (' ', 243, ' '): (1153, ' '),
            (' ', 244, ' '): (1154, ' '),
            (' ', 245, ' '): (1155, ' '),
            (' ', 246, ' '): (1156, ' '),
            (' ', 247, ' '): (1157, ' '),
            (' ', 248, ' '): (1158, ' '),
            (' ', 249, ' '): (1159, ' '),
            (' ', 250, ' '): (1160, ' '),
            (' ', 251, ' '): (1161, ' '),
            (' ', 252, ' '): (1162, ' '),
            (' ', 253, ' '): (1163, ' '),
            (' ', 254, ' '): (1164, ' '),
            (' ', 255, ' '): (1165, ' '),
            (' ', 256, ' '): (1166, ' '),
            (' ', 257, ' '): (1167, ' '),
            (' ', 258, ' '): (1168, ' '),
            (' ', 259, ' '): (1169, ' '),
            (' ', 260, ' '): (1170, ' '),
            (' ', 261, ' '): (1171, ' '),
            (' ', 262, ' '): (1172, ' '),
            (' ', 263, ' '): (1173, ' '),
            (' ', 264, ' '): (1174, ' '),
            (' ', 265, ' '): (1175, ' '),
            (' ', 266, ' '): (1176, ' '),
            (' ', 267, ' '): (1177, ' '),
            (' ', 268, ' '): (1178, ' '),
            (' ', 269, ' '): (1179, ' '),
            (' ', 270, ' '): (1180, ' '),
            (' ', 271, ' '): (1181, ' '),
            (' ', 272, ' '): (1182, ' '),
            (' ', 273, ' '): (1183, ' '),
            (' ', 274, ' '): (1184, ' '),
        })
        self.assertEqual(chain_type, 'MH1')
        self.assertEqual(germline_info, {'GA1': [('human', 'HLA-A*2476'), 1.0], 'GA2': [('human', 'HLA-A*2402'), 1.0]})
        self.assertFalse(scTCR)

    def test_mr1_chain(self):
        mr1_chain = self.mmcif_parser.get_structure('', './test_files/7zt4.cif')[0]['A']

        aligned_numbering, chain_type, germline_info, scTCR = annotate(mr1_chain)

        self.assertEqual(max([seq_id[0] for seq_id in aligned_numbering.values()]), 1174)
        self.assertEqual(chain_type, 'MR1')
        self.assertEqual(germline_info, {
            'MR1': [('human', 'MR1*01'), 0.9886363636363636], 'MR2': [('human', 'MR1*01'), 1.0]
        })
        self.assertFalse(scTCR)

    def test_cd1_chain(self):
        cd1_chain = self.pdb_parser.get_structure('', './test_files/4x6d_tcr_cd1a.pdb')[0]['A']

        aligned_numbering, chain_type, germline_info, scTCR = annotate(cd1_chain)

        self.assertEqual(max([seq_id[0] for seq_id in aligned_numbering.values()]), 1186)
        self.assertEqual(chain_type, 'CD1')
        self.assertEqual(germline_info, {
            'GA1L': [('human', 'CD1A*01'), 0.8941176470588236], 'GA2L': [('human', 'CD1A*01'), 1.0]
        })
        self.assertFalse(scTCR)

    def test_class_ii(self):
        tcr_class_ii_structure = self.mmcif_parser.get_structure('', './test_files/6r0e.cif')

        mhc_ii_chain_1 = tcr_class_ii_structure[0]['AAA']
        mhc_ii_chain_2 = tcr_class_ii_structure[0]['BBB']

        aligned_numbering, chain_type, germline_info, scTCR = annotate(mhc_ii_chain_1)

        self.assertEqual(max([seq_id[0] for seq_id in aligned_numbering.values()]), 188)
        self.assertEqual(chain_type, 'GA')
        self.assertEqual(germline_info, {'GA': [('human', 'HLA-DRA*0101'), 1.0]})
        self.assertFalse(scTCR)

        aligned_numbering, chain_type, germline_info, scTCR = annotate(mhc_ii_chain_2)

        self.assertEqual(max([seq_id[0] for seq_id in aligned_numbering.values()]), 184)
        self.assertEqual(chain_type, 'GB')
        self.assertEqual(germline_info, {'GB': [('mouse', 'H2-EBu'), 0.7222222222222222]})
        self.assertFalse(scTCR)


class TestTCR(unittest.TestCase):
    def test_crop_class_I(self):
        tcrs = stcrpy.load_TCR('./test_files/5hyj.pdb')
        tcr = tcrs[0]

        tcr.crop()

        self.assertTrue(max([res.id[1] for chain in tcr for res in chain]) <= 128)
        self.assertTrue(max([res.id[1] for chain in tcr.MHC[0] for res in chain if res.id[0] == ' ']) % 1000 <= 92)

    def test_crop_class_I_dont_remove_hetatoms(self):
        tcrs = stcrpy.load_TCR('./test_files/5hyj.pdb')
        tcr = tcrs[0]

        tcr.crop(remove_het_atoms=False)

        self.assertTrue(max([res.id[1] for chain in tcr for res in chain if res.id[0] == ' ']) <= 128)
        self.assertFalse(max([res.id[1] for chain in tcr for res in chain]) <= 128)

    def test_crop_class_II(self):
        tcr = stcrpy.load_TCR('./test_files/8vcy_class_II.pdb')
        tcr.crop()

        self.assertTrue(max([res.id[1] for chain in tcr for res in chain if res.id[0] == ' ']) <= 128)
        self.assertTrue(max([res.id[1] for chain in tcr.MHC[0] for res in chain if res.id[0] == ' ']) <= 92)
        tcr.get_MHC()[0].get_MHC_type()


class TestabTCR(unittest.TestCase):
    def setUp(self):
        pdb_file = "./test_files/5hyj.pdb"
        self.tcrs = stcrpy.load_TCR(pdb_file)

    def test_standardise_chain_names(self):
        tcr = self.tcrs[1]

        tcr.standardise_chain_names()

        self.assertEqual(tcr.id, 'ED')
        self.assertEqual(tcr.VA, 'D')
        self.assertEqual(tcr.get_VA().id, 'D')
        self.assertEqual(tcr.VB, 'E')
        self.assertEqual(tcr.get_VB().id, 'E')

        self.assertEqual(tcr.antigen[0].id, 'C')

        self.assertEqual(tcr.MHC[0].id, 'AB')
        self.assertEqual(tcr.MHC[0].get_alpha().id, 'A')
        self.assertEqual(tcr.MHC[0].get_B2M().id, 'B')

    def test_standardise_chain_names_when_already_standard(self):
        tcr = self.tcrs[0]

        tcr.standardise_chain_names()

        self.assertEqual(tcr.id, 'ED')
        self.assertEqual(tcr.VA, 'D')
        self.assertEqual(tcr.get_VA().id, 'D')
        self.assertEqual(tcr.VB, 'E')
        self.assertEqual(tcr.get_VB().id, 'E')

        self.assertEqual(tcr.antigen[0].id, 'C')

        self.assertEqual(tcr.MHC[0].id, 'AB')
        self.assertEqual(tcr.MHC[0].get_alpha().id, 'A')
        self.assertEqual(tcr.MHC[0].get_B2M().id, 'B')

    def test_standardise_chain_names_mhc_chain_e(self):
        tcr, _ = stcrpy.load_TCR('./test_files/2e7l.pdb')

        tcr.standardise_chain_names()

        self.assertEqual(tcr.id, 'ED')
        self.assertEqual(tcr.VA, 'D')
        self.assertEqual(tcr.get_VA().id, 'D')
        self.assertEqual(tcr.VB, 'E')
        self.assertEqual(tcr.get_VB().id, 'E')

        self.assertEqual(tcr.antigen[0].id, 'C')

        self.assertEqual(tcr.MHC[0].id, 'A')
        self.assertEqual(tcr.MHC[0].get_alpha().id, 'A')


    def test_swapped_chain_ids(self):
        tcr = stcrpy.load_TCR('./test_files/swapped_chain_ids_5hyj_DECAB.pdb')
        tcr.standardise_chain_names()

        self.assertEqual(tcr.id, 'ED')
        self.assertEqual(tcr.VA, 'D')
        self.assertEqual(tcr.get_VA().id, 'D')
        self.assertEqual(tcr.VB, 'E')
        self.assertEqual(tcr.get_VB().id, 'E')

        self.assertEqual(tcr.antigen[0].id, 'C')

        self.assertEqual(tcr.MHC[0].id, 'AB')
        self.assertEqual(tcr.MHC[0].get_alpha().id, 'A')
        self.assertEqual(tcr.MHC[0].get_B2M().id, 'B')


class TestgdTCR(unittest.TestCase):
    def test_standardise_chain_names(self):
        pdb_file = "./test_files/1hxm_dbTCRs.pdb"
        tcrs = stcrpy.load_TCR(pdb_file)
        tcr = tcrs[0]

        tcr.standardise_chain_names()

        self.assertEqual(tcr.id, 'ED')
        self.assertEqual(tcr.VD, 'D')
        self.assertEqual(tcr.get_VD().id, 'D')
        self.assertEqual(tcr.VG, 'E')
        self.assertEqual(tcr.get_VG().id, 'E')
